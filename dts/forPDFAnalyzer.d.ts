// Learned from https://trungk18.com/experience/how-to-copy-an-object-from-the-chrome-inspector-console-as-code/

//#region Doc
// Generated by https://quicktype.io

export interface Doc {
    totalPages: number;
    pageInfo: PageInfo[];
    textData: TextObject[];
    hLines: Line[];
    vLines: Line[];
    blocks: Block[];
    tables: Array<Array<Block[]>>;
    TS: any[];
    CT: number[];
    getKeyObj: (keyName: string, keyBounds: DocBounds,
        // TODO, still don't know how to solve it.
        options?: DocOptions) => TextObject //| TextObject[]
    resolve: (target: TargetForOne, options?: MainOptions) => TextObject;
    resolveRange: (target: TargetForRange, options?: MainOptions) => TextObject[];
}

export interface TargetForRange extends Target {
    startKeyObj?: TextObject;
    endKeyObj?: TextObject;
    startKeyName?: string;
    endKeyName?: string;
    startKeyBounds?: DocBounds;
    endKeyBounds?: DocBounds;
}

export interface TargetForOne extends Target {
    keyObj?: TextObject;
    keyName?: string;
    keyBounds?: DocBounds;
}

export interface Target {
    valPos?: "UP" | "DOWN" | "LEFT" | "RIGHT";
    valBounds?: DocBounds;
    relValBounds?: DocBounds;
}

export interface DocOptions extends MainOptions {
    all?: boolean;
}

export interface MainOptions {
    regExp?: RegExp;
    ignoreHeader?: number;
    ignoreFooter?: number;
}

export interface DocBounds {
    top?: number;
    bottom?: number;
    left?: number;
    right?: number;
    page?: number;
}

export interface Block {
    id: string;
    l: number;
    r: number;
    t: number;
    b: number;
    pathT: number | string;
    pathR: number;
    pathC: number;
}

export interface Line {
    sx: number;
    sy: number;
    ex: number;
    ey: number;
    w: number;
    l: number;
}

export interface PageInfo {
    pixWidth: number;
    pixHeight: number;
}

export interface TextObject {
    text: string;
    LB: C;
    RB: C;
    RT: C;
    LT: C;
    C: C;
    w: number;
    h: number;
    block: Block;
    // r: string;
    // leftLine: Line;
    // rightLine: Line;
    // upLine: Line;
    // downLine: Line;
    detectGroup: () => TextObject[];
    detectLine: (dir: "up" | "down" | "left" | "right") => Line;
    // getCol: (n = 0, option = undefined) => TextObject[][];
    // getRow: (n = 0, option = undefined) => TextObject[][];
    isDeleted: () => boolean;
}

export interface C {
    x: number;
    y: number;
}
//#endregion DOC

export var input: Doc;

/**
 * key: FileName 檔名
 * 
 * value: Text Content 檔案文字內容
 */
export var output: { [key: string]: string };